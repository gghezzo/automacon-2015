From theory to production: Distributed computing for the everyday infrastructure.

Kelsey Hightower
CoreOS
kelsey.hightower@coreos.com
@kelseyhightower

* Containers

Unix processes not lightweight Virtual Machines

- application + dependencies = image
- Runtime environment (cgroups, namespaces, env vars)

.image images/container.png

* Kubernetes

Container management, scheduling, and service discovery.

- API driven application management
- Centralized cluster configuration (etcd)
- Controllers enforce desired state
- Labels identify resources (nodes, applications, services)

* Node

Provides compute and storage resources to the cluster.

- docker
- kubelet
- proxy

.image images/kubernetes-nodes-2.png

* Pod

Represents a logical application.

- One or more containers
- Shared namespaces

.image images/pod.png

* Scheduler

Schedules pods to run on nodes.

- Global scheduler for long running jobs
- Best fit chosen based on pod requirements
- Pluggable

.image images/kubernetes-scheduler.png

* Replication Controller

Manages a replicated set of pods.

- Creates pods from a template
- Ensures desired number of pods are running
- Online resizing 

.image images/kubernetes-rc.png

* Replication Controller

Manages a replicated set of pods.

- Creates pods from a template
- Ensures desired number of pods are running
- Self-healing 

.image images/kubernetes-rc-reschedule.png

* Service

Service discovery for pods.

- Virutal IP or Node Port per service
- Dynamic backends based on label queries 

* Demo
